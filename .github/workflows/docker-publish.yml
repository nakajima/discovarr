name: Docker Build, Publish, and Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0, v1.2.3, v2.0-alpha, etc.
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Needed to push to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }} # e.g., ghcr.io/your-username/aiarr
          tags: |
            type=ref,event=tag 
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: docker_build # Add an ID to reference outputs
        with:
          context: . # Build context is the root of your repository
          file: ./Dockerfile # Explicitly point to your production Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create image digest file
        run: echo "${{ steps.docker_build.outputs.digest }}" > image-digest.txt

      - name: Create image tags file
        run: echo "${{ steps.meta.outputs.tags }}" > image-tags.txt

      - name: Upload image digest and tags as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: image-info-artifact
          path: |
            image-digest.txt
            image-tags.txt

  release:
    name: Create Release
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    steps:
      - name: Get version information from tag
        id: tag_info
        run: |
          # GITHUB_REF_NAME is the short ref name, e.g., "v1.0.0" for a tag
          TAG_NAME="${{ github.ref_name }}"
          # Remove 'v' prefix for changelog reader if needed, or use full tag if reader supports it
          VERSION_NUMBER="${TAG_NAME#v}"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION_NUMBER}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.tag_info.outputs.version_number }} # Use version without 'v' prefix
          path: ./CHANGELOG.md

      - name: Create directory for release assets
        run: mkdir ./release-assets

      - name: Download image information artifact
        uses: actions/download-artifact@v4
        with:
          name: image-info-artifact
          path: ./release-assets/

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_info.outputs.tag_name }} # Use the full Git tag (e.g., v1.0.0)
          name: Release ${{ steps.tag_info.outputs.tag_name }} # Release title using the full tag
          body: ${{ steps.changelog_reader.outputs.changes }}
          artifacts: ./release-assets/* # Upload all files from the release-assets directory
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
          token: ${{ secrets.GITHUB_TOKEN }}